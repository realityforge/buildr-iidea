= Improved Intellij IDEA support for buildr

This extension provides tasks to generate Intellij IDEA project files by issuing:

  $ buildr iidea:generate

This task will generate an .iml file for every project (or subproject) and a .ipr
that you can directly open for the root project.

The generated project files can be removed by issuing;

  $ buildr iidea:clean

The iidea task generates the project files based on the settings for each project or
extension specific settings. The main and test source trees are added to the .iml
file for each project as are the respective resource directories. The target and report
directories are excluded from the project. If the project files exist on the filesystem
the extension will replace specific component sections in the xml with the generated
component configurations.

Dependencies come in two forms. Dependencies on other projects and dependencies on
external jars. Dependencies on other projects are added as module dependencies in the
.iml while jars are added as regular file dependencies.

== Idea Specific Directives

The extension specific settings of subprojects inherit the parent projects settings
unless overwritten.

=== Project file naming

The extension will use the last element of the projects name when generating the .ipr
and .iml files. i.e. A project named "foo" will generate "foo.iml" and "foo.ipr" while
a project named "foo:bar" will generate "bar/bar.iml" and no ipr. (The .ipr project
files are only generated for base project). The name can be modified by setting the
"ipr.suffix" or "iml.suffix" settins which specifies the suffix appended to the
filenames. The user can also overide the name completely by setting "ipr.id" or "iml.id".

==== Example: Setting id

  define "foo" do
    ipr.id = "beep"
    define "bar" do
      iml.id = "baz"
    end
  end

Will generate:

  beep.ipr
  foo.iml
  bar/baz.iml

==== Example: Setting suffix

  define "foo" do
    ipr.suffix = "-suffix1"
    iml.suffix = "-suffix2"
    define "bar"
  end

Will generate:

  foo-suffix1.ipr
  foo-suffix2.iml
  bar/bar-suffix2.iml

=== VCS Integration

The extension will attempt to guess the VCS type of the project by looking for a .svn
or .git directory in the base projects directory. If either of these are set it will
configure the component as appropriate. Otherwise the user will need to manually specify
the project to one of either 'Git' or 'svn' using the ipr.vcs setting.

==== Example

  define "foo" do
    ipr.vcs = 'Git'
  end

=== Dependency generation

When file dependencies are inserted into an .iml file absolute paths are used by default.
The user can override this by setting the "iml.local_repository_env_override" setting.
If set to nil absolute paths are used. If set to a non-null value the path to the local
maven repository will be replaced with the specified environment variable.

==== Example: Setting local_repository_env_override

  define "foo" do
    iml.local_repository_env_override = "MAVEN_REPOSITORY"
    compile.with 'group:id:jar:1.0'
  end

Will generate a dependency with a path like:

  jar://$MAVEN_REPOSITORY$/group/id/1.0/id-1.0.jar!/

rather than the default

  jar:///home/peter/.m2/repository/group/id/1.0/id-1.0.jar!/

=== Custom Component Sections

If the extension does not provide capability to generate configuration for a particular
IDEA plugin the user can provide their own configuration data via the "ipr.add_component"
or "iml.add_component" methods.

==== Example: Adding .ipr specific component

This example changes the compiler configuration for project.

  define "foo" do
    ipr.add_component("CompilerConfiguration") do |component|
      component.option :name => 'DEFAULT_COMPILER', :value => 'Javac'
      component.option :name => 'DEPLOY_AFTER_MAKE', :value => '0'
      component.resourceExtensions do |xml|
        xml.entry :name => '.+\.nonexistent'
      end
      component.wildcardResourceExtensions do |xml|
        xml.entry :name => '?*.nonexistent'
      end
    end
  end

==== Example: Adding .iml specific component

This example adds the web facet to a project.

  define "foo" do
    iml.add_component("FacetManager") do |component|
      component.facet :type => 'web', :name => 'Web' do |facet|
        facet.configuration do |conf|
          conf.descriptors do |desc|
            desc.deploymentDescriptor :name => 'web.xml',
              :url => "file://$MODULE_DIR$/src/main/webapp/WEB-INF/web.xml",
              :optional => "false", :version => "2.4"
          end
          conf.webroots do |webroots|
            webroots.root :url => "file://$MODULE_DIR$/src/main/webapp", :relative => "/"
          end
        end
      end
    end
  end

=== Templates

The underlying project files are xml the contain elements for a number of "components".
The extension will load any existing project files and replace or add any component
elements that are generated by the extension. The extension also allows the user to specify
a template with either ipr.template or iml.template settings. If a template is specified
it will be loaded and any component elements in these documents will be merged into the base
document prior to merging in generated sections. Templates are useful if you want to enforce
certain configuration options (i.e. project specific code style).

==== Example

  define "foo" do
    ipr.template = 'project.ipr.template'
    iml.template = 'module.ipr.template'
  end

=== Groups

IDEA provides the facility to organise modules into groups. By default the extension does not
do this but it can be enabled by iml.group setting. If that setting is set to true then the
.iml file will be placed in a group based on the parent projects name. If the setting is a string
then that is used as the name of the group.

==== Example

  define "foo" do
    iml.group = true
    define 'bar' do
      define 'baz'
    end
    define 'rab' do
      iml.group = "MyGroup"
    end
  end

Will place the generated .imls in the following groups:

  foo.iml                => ''
  bar/bar.iml            => 'foo'
  bar/baz/baz.iml        => 'foo/bar'
  rab/rab.iml            => 'MyGroup'

=== Add Extra .iml files to .ipr

The 'ipr.extra_modules' setting makes it possible to add extra modules to the generated iml file.
The setting is an array of filenames relative to the base project directory.

==== Example

  define "foo" do
    ipr.extra_modules << 'other.iml'
    ipr.extra_modules << 'other_other.iml'
  end

Will add the 'other.iml' and 'other_other.iml' files to the .ipr project files.

== Compatibility

It's been tested with IDEA 9.x.
